##导入宏定义
$!init
$!define

##设置表后缀（宏定义）
#setTableSuffix("Controller")

##保存文件（宏定义）
#save("/controller", "Controller.java")

##包路径（宏定义）
#setPackageSuffix("controller")

##定义服务名
#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), "Service"))

##定义实体对象名
#set($entityName = $!tool.firstLowerCase($!tableInfo.name))

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.api.ApiController;
import com.baomidou.mybatisplus.extension.api.R;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
##import $!{tableInfo.savePackageName}api.entity.$!tableInfo.name;
import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import java.io.Serializable;
import java.util.*;

##表注释（宏定义）
@Api(tags = "$!{tableInfo.comment}($!{tableInfo.name})")
@RestController
@RequestMapping("$!tool.firstLowerCase($!tableInfo.name)")
public class $!{tableInfo.name}Controller {

@Resource
private $!{tableInfo.name}Service $!{serviceName};

/**
* 分页查询所有数据
* @param $!entityName 查询实体
* @return 所有数据
*/
@GetMapping("selectPage")
@ApiOperation(value = "分页查询所有数据")
public ResResult selectPage($!{tableInfo.name} $!entityName, KHCommonParams khCommonParams) {
QueryWrapper<$!{tableInfo.name}> queryWrapper = new QueryWrapper<>();
#foreach($column in $tableInfo.fullColumn)
    #if( $!column.comment )
    if(ObjectUtils.isNotEmpty($!{entityName}.get$!{tool.firstUpperCase($column.name)}())) {
    queryWrapper.or().like("$!{column.name}",$!{entityName}.get$!{tool.firstUpperCase($column.name)}());
    }
    #end
#end

#set($StringBj="")
#foreach($column in $tableInfo.fullColumn)
    #if( $!column.comment )
        #set($StringBj=$!{StringBj}+$!{tool.hump2Underline($column.name)}+",")
    #end
#end


queryWrapper.or().orderByDesc("create_time");
if(StringUtils.isNotEmpty(commonParams.getStartTime())) {
    queryWrapper.or().between("create_time",commonParams.getStartTime(),commonParams.getEndTime());
}
queryWrapper.select("$StringBj.substring(0,$StringBj.lastIndexOf(','))");
Page<$!{tableInfo.name}> $!{entityName}Page = this.$!{entityName}Service.selectPage(khCommonParams.getPageNum(), khCommonParams.getPageSize(), queryWrapper);
return new ResResult().success($!{entityName}Page);
}

/**
* 通过主键查询单条数据
* @param id 主键
* @return 单条数据
*/
@GetMapping("selectById")
@ApiOperation(value = "通过id主键查询单条数据")
public ResResult selectById(@RequestParam("id") Integer id) {
return new ResResult().success(this.$!{serviceName}.selectById(id));
}

/**
* @Description: 根据id数组查询品牌列表
* @Param: idList id数组
* @return: ids列表数据
*/
@ApiOperation(value = "根据id数组查询品牌列表")
@PostMapping("selectBatchIds")
public ResResult selectBatchIds(@RequestParam("idList") List
<Integer> idList) {
    return new ResResult().success(this.$!{serviceName}.selectBatchIds(idList));
    }
    /**
    * 新增数据
    * @param $!entityName 实体对象
    * @return 新增结果
    */
    @ApiOperation(value = "新增数据")
    @PostMapping("insert")
    public ResResult insert(@RequestBody $!{tableInfo.name} $!entityName) {
    return new ResResult().success(this.$!{serviceName}.insert($!entityName));
    }

    /**
    * 修改数据
    * @param $!entityName 实体对象
    * @return 修改结果
    */
    @ApiOperation(value = "根据id修改数据")
    @PutMapping("updateById")
    public ResResult updateById(@RequestBody $!{tableInfo.name} $!entityName) {
    return new ResResult().success(this.$!{serviceName}.updateById($!entityName));
    }

    /**
    * 删除数据
    * @param idList 主键结合
    * @return 删除结果
    */
    @ApiOperation(value = "根据id数组删除数据")
    @DeleteMapping("deleteBatchIds")
    public ResResult deleteBatchIds(@RequestBody List
    <Long> idList) {
        return new ResResult().success(this.$!{serviceName}.deleteBatchIds(idList));
        }

        @DeleteMapping("deleteById")
        @ApiOperation(value = "根据id数组删除数据")
        public ResResult deleteById(@RequestParam("id") Integer id) {
        return new ResResult().success(this.$!{serviceName}.deleteById(id));
        }
        }