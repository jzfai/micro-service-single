##生成查询表单数据
#macro(queryItem)
    #foreach($item in $queryConfig)
        #if($item.componentType=="input") ##input
        <el-form-item prop="${item.field}">
            <el-input
                    v-model="searchForm.${item.field}"
                    style="width:${item.width}px"
                    placeholder="${item.desc}"/>
        </el-form-item>
        #elseif($item.componentType=="select") ##select
        <el-form-item prop="${item.field}">
            <el-select
                    v-model="searchForm.${item.field}"
                    clearable="clearable"
                    placeholder="${item.desc}"
                    style="width:${item.width}px">
                #foreach($enum in $item.optionDataArr)
                    <el-option label="${enum.label}" value="${enum.value}"/>
                #end
            </el-select>
        </el-form-item>
        #elseif($item.componentType=="selectApi") ##selectApi
        <el-form-item prop="${item.field}">
            <el-select
                    v-model="searchForm.${item.fieldCase}"
                    clearable="clearable"
                    placeholder="${item.desc}"
                    style="width:${item.width}px">
                <el-option
                        v-for="item in select${item.fieldCase}"
                        :key="item.${itemKey}"
                        :label="item.${item.labelKey}"
                        :value="item.${itemKey}"/>
            </el-select>
        </el-form-item>
        #elseif($item.componentType=="cascaderApi") ##cascaderApi
        <el-form-item label="${item.desc}">
            <el-cascader
                    :options="cascade${item.fieldCase}"
                    clearable="clearable"
                    filterable="filterable"
                    placeholder="${item.desc}"
                    :show-all-levels="false"
                    style="width:${item.width}px"/>
        </el-form-item>
        #elseif($item.componentType=="datetimerange") ##datetimerange
        <el-form-item prop="${item.field}">
            <el-date-picker
                    v-model="selectStartEndArr"
                    type="datetimerange"
                    format="YYYY-MM-DD HH:mm:ss"
                    value-format="YYYY-MM-DD HH:mm:ss"
                    @change="selectTimePack"
                    style="width:${item.width}px"
                    range-separator="-"
                    start-placeholder="开始日期"
                    end-placeholder="结束日期"/>
        </el-form-item>
        #elseif($item.componentType=="datetime") ##datetime
        <el-form-item prop="${item.field}">
            <el-date-picker
                    v-model="searchForm.${item.field}"
                    type="datetime"
                    format="YYYY-MM-DD HH:mm:ss"
                    placeholder="${item.desc}"
                    value-format="YYYY-MM-DD HH:mm:ss"
                    style="width:${item.width}px"/>
        </el-form-item>
        #elseif($item.componentType=="date") ##date
        <el-form-item prop="${item.field}">
            <el-date-picker v-model="datePacking" type="date"  placeholder="${item.desc}" style="width:${item.width}px"/>
        </el-form-item>
        #end
    #end
#end
##生成queryScript
#macro(queryScript)
    #foreach($item in $queryConfig)
        #if($item.componentType=="selectApi")##selectApi
        let select${item.fieldCase} = $ref([])
        const select${item.fieldCase}Req = () => {
        let reqConfig = {
        url: '${item.api}',
        method: '${item.method}',
        }
        axiosReq(reqConfig).then((resData) => {
        select${item.fieldCase} = resData.data
        })
        }
        #elseif($item.componentType=="cascaderApi") ##cascader
        let cascade${item.fieldCase} = $ref([])
        const cascadeProps = {
        multiple: false,
        value: '${item}',
        label: '${item.label}',
        children: '${item.children}'
        }
        const cascade${item.fieldCase}Req = () => {
        let reqConfig = {
        url: '${item.api}',
        method: '${item.method}'
        }
        axiosReq(reqConfig).then((resData) => {
        cascade${item.fieldCase} = resData.data
        })
        }
        const handleCascade = (data) => {
        console.log(data)
        }
        #elseif($item.componentType=="datetimerange") ##datetimerange

        let selectStartEndArr=$ref([])
        const dateTimePacking = (timeArr) => {
        selectStartEndArr= timeArr
        if (timeArr && timeArr.length === 2) {
        searchForm.startTime = timeArr[0]
        searchForm.endTime = timeArr[1]
        } else {
        searchForm.startTime = ''
        searchForm.endTime = ''
        }
        }
        #end
    #end
#end
##onMouted需要调用的请求
#macro(onMountedScript)
onMounted(()=>{
selectPageReq()
    #foreach($item in $queryConfig)
        #if($item.componentType=="selectApi")##selectApi
        select${item.fieldCase}Req()
        #elseif($item.componentType=="cascaderApi") ##cascader
        cascade${item.fieldCase}Req()
        #end
    #end
})
#end