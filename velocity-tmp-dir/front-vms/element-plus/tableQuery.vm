#parse("tableQueryUtils.vm")
<template>
    <div class="mt-10px query-page-style">
        <!--操作-->
        <div class="rowBS">
            <div class="rowSS mr-30px">
                #tableGlobalOperatorTmp()
            </div>
            <div class="rowSS">
                <!--条件搜索-->
                <el-form ref="refSearchForm" :inline="true" :model="searchForm">
                    #queryFormItemTmp()
                </el-form>
                <!--查询按钮-->
                <el-button type="primary" @click="resetBtnClick">查询</el-button>
                <el-button type="primary" @click="resetForm()">重置</el-button>
            </div>
        </div>
        <!--表格和分页-->
        <el-table
                id="resetElementDialog"
                ref="refuserTable"
                :height="`calc(100vh - ${settings.delWindowHeight})`"
                border
                :data="tableListData"
                @selection-change="handleSelectionChange"
        >
           #tableItemTmp()
            <!--点击操作-->
            <el-table-column fixed="right" align="center" label="操作" width="180">
                <template #default="{ row }">
                    <div class="table-operation-btn">
                      #tableOperatorTmp()
                    </div>
                </template>
            </el-table-column>
        </el-table>
        <!--分页-->
        #tablePaginationTmp()
    </div>
</template>
<script setup lang="ts">
    defineOptions({ name: 'Brand' })
    import { useTable } from '@/hooks/global/useTable'
    import { Delete, FolderAdd } from '@element-plus/icons-vue'
    import settings from '@/settings'

    let searchForm = reactive({
       #formKeyScrpt()
    })

    const selectPageReq = () => {
        const reqConfig = {
            url: '${apiConfig.queryApi}',
            method: '${apiConfig.queryMethod}'
        }
        tableListReq(reqConfig)
    }


    //重置
    const refSearchForm = $ref(null)
    const resetForm = () => {
        refSearchForm.resetFields()
    }

    //批量删除
    const multiDelBtnClick = () => {
        let reqConfig = {
            url: '${apiConfig.multiDeleteApi}',
            method: '${apiConfig.multiDeleteMethod}',
            bfLoading: true
        }
        multiDelBtnDill(reqConfig)
    }

    //单个删除
    const tableDelClick = (row) => {
        const reqConfig = {
            url: '${apiConfig.deleteApi}',
            data: { id: row.id },
            isParams: true,
            method: '${apiConfig.deleteMethod}',
            bfLoading: true
        }
        tableDelDill(row, reqConfig)
    }

    //添加和修改详情
    const { routerPush } = useVueRouter()
    const addBtnClick = () => {
        routerPush('${basicConfig.apiFileNameFirstCase}AddEdit')
    }
    const tableEditClick = (row) => {
        routerPush('${basicConfig.apiFileNameFirstCase}AddEdit', { isEdit: true, row })
    }
    let tableDetailClick = (row) => {
        routerPush('${basicConfig.apiFileNameFirstCase}Detail', { isDetail: true, row})
    }
    #onMountedScript()
    #apiDataScript()
    #apiReqScript()

    //引入table-query相关的hooks
    let {
        pageNum,
        pageSize,
        totalPage,
        tableListData,
        tableListReq,
        dateRangePacking,
        handleSelectionChange,
        handleCurrentChange,
        handleSizeChange,
        resetBtnClick,
        multiDelBtnDill,
        tableDelDill
    } = useTable(searchForm, selectPageReq)
</script>

<style scoped lang="scss">

</style>
